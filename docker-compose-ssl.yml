version: '3.9'

services:
  sentry-redis:
    image: redis:latest
    container_name: sentry-redis
    hostname: sentry-redis
    restart: always
    networks:
      - internal
    volumes:
      - './sentry/data/redis/data:/data'
  
  sentry-postgres:
    image: postgres:latest
    container_name: sentry-postgres
    hostname: sentry-postgres
    restart: always
    env_file:
        - ./envs/postgres/.env
    networks:
      - internal
    volumes:
      - './sentry/data/postgres:/var/lib/postgresql/data'

  sentry-certbot:
    container_name: sentry-certbot
    build: 
      context: ./dockerfiles/certbot/
    command: echo "Skipping..."
    env_file:
      - ./envs/nginx/.env
    volumes: 
      - certbot_www_volume:/vol/www/
      - certbot_certs_volume:/etc/letsencrypt/
    depends_on:
      - sentry-nginx
    networks:
      - sentry
      - internal

  sentry-nginx:
    container_name: sentry-nginx
    build:
      context: .
      dockerfile: ./dockerfiles/nginx/Dockerfile
    restart: always
    env_file:
      - ./envs/nginx/.env
    ports:
      - 443:443
      - 80:80
    volumes:
      - certbot_www_volume:/vol/www/
      - proxy_dhparams:/vol/proxy
      - certbot_certs_volume:/etc/letsencrypt/
      - ./dockerfiles/nginx/config:/etc/nginx/templates
    depends_on:
      - sentry-base
    networks:
      - sentry
      - internal

  sentry-base:
    image: sentry:latest
    container_name: sentry-base
    hostname: sentry-base
    restart: always
    expose:
      - 9000
    env_file:
      - ./envs/sentry/.env
    depends_on:
      - sentry-redis
      - sentry-postgres
    networks:
      - sentry
      - internal
    volumes:
      - './sentry/data/sentry:/var/lib/sentry/files'

  sentry-cron:
    image: sentry:latest
    container_name: sentry-cron
    hostname: sentry-cron
    restart: always
    env_file:
      - ./envs/sentry/.env
    depends_on:
      - sentry-redis
      - sentry-postgres
    command: "sentry run cron"
    networks:
      - internal
    volumes:
      - './sentry/data/sentry:/var/lib/sentry/files'

  sentry-worker:
    image: sentry:latest
    container_name: sentry-worker
    hostname: sentry-worker
    restart: always
    env_file:
      - ./envs/sentry/.env
    depends_on:
      - sentry-redis
      - sentry-postgres
    command: "sentry run worker"
    networks:
      - internal
    volumes:
      - './sentry/data/sentry:/var/lib/sentry/files'


networks:
  sentry:
    name: sentry
  internal:


volumes:
  certbot_www_volume:
  certbot_certs_volume:
  proxy_dhparams: